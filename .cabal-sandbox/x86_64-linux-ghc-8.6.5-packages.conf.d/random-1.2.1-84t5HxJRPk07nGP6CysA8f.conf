name: random
version: 1.2.1
id: random-1.2.1-84t5HxJRPk07nGP6CysA8f
key: random-1.2.1-84t5HxJRPk07nGP6CysA8f
license: BSD-3-Clause
maintainer: core-libraries-committee@haskell.org
synopsis: Pseudo-random number generation
description:
    This package provides basic pseudo-random number generation, including the
    ability to split random number generators.
    .
    == "System.Random": pure pseudo-random number interface
    .
    In pure code, use 'System.Random.uniform' and 'System.Random.uniformR' from
    "System.Random" to generate pseudo-random numbers with a pure pseudo-random
    number generator like 'System.Random.StdGen'.
    .
    As an example, here is how you can simulate rolls of a six-sided die using
    'System.Random.uniformR':
    .
    >>> let roll = uniformR (1, 6)        :: RandomGen g => g -> (Word, g)
    >>> let rolls = unfoldr (Just . roll) :: RandomGen g => g -> [Word]
    >>> let pureGen = mkStdGen 42
    >>> take 10 (rolls pureGen)           :: [Word]
    [1,1,3,2,4,5,3,4,6,2]
    .
    See "System.Random" for more details.
    .
    == "System.Random.Stateful": monadic pseudo-random number interface
    .
    In monadic code, use 'System.Random.Stateful.uniformM' and
    'System.Random.Stateful.uniformRM' from "System.Random.Stateful" to generate
    pseudo-random numbers with a monadic pseudo-random number generator, or
    using a monadic adapter.
    .
    As an example, here is how you can simulate rolls of a six-sided die using
    'System.Random.Stateful.uniformRM':
    .
    >>> let rollM = uniformRM (1, 6)                 :: StatefulGen g m => g -> m Word
    >>> let pureGen = mkStdGen 42
    >>> runStateGen_ pureGen (replicateM 10 . rollM) :: [Word]
    [1,1,3,2,4,5,3,4,6,2]
    .
    The monadic adapter 'System.Random.Stateful.runStateGen_' is used here to lift
    the pure pseudo-random number generator @pureGen@ into the
    'System.Random.Stateful.StatefulGen' context.
    .
    The monadic interface can also be used with existing monadic pseudo-random
    number generators. In this example, we use the one provided in the
    <https://hackage.haskell.org/package/mwc-random mwc-random> package:
    .
    >>> import System.Random.MWC as MWC
    >>> let rollM = uniformRM (1, 6)       :: StatefulGen g m => g -> m Word
    >>> monadicGen <- MWC.create
    >>> replicateM 10 (rollM monadicGen) :: IO [Word]
    [2,3,6,6,4,4,3,1,5,4]
    .
    See "System.Random.Stateful" for more details.
category: System
abi: 0c126d8ed5f125e05b4a6b2e2f6e297e
exposed: True
exposed-modules:
    System.Random System.Random.Internal System.Random.Stateful
hidden-modules: System.Random.GFinite
import-dirs: /home/runner/Cabal-Haskell/.cabal-sandbox/lib/x86_64-linux-ghc-8.6.5/random-1.2.1-84t5HxJRPk07nGP6CysA8f
library-dirs: /home/runner/Cabal-Haskell/.cabal-sandbox/lib/x86_64-linux-ghc-8.6.5/random-1.2.1-84t5HxJRPk07nGP6CysA8f
dynamic-library-dirs: /home/runner/Cabal-Haskell/.cabal-sandbox/lib/x86_64-linux-ghc-8.6.5
data-dir: /home/runner/Cabal-Haskell/.cabal-sandbox/share/x86_64-linux-ghc-8.6.5/random-1.2.1
hs-libraries: HSrandom-1.2.1-84t5HxJRPk07nGP6CysA8f
depends:
    base-4.12.0.0 bytestring-0.10.8.2 deepseq-1.4.4.0 mtl-2.2.2
    splitmix-0.1.0.4-1X9G0ZYCu8V7Hf0KihhGKi
haddock-interfaces: /home/runner/Cabal-Haskell/.cabal-sandbox/share/doc/x86_64-linux-ghc-8.6.5/random-1.2.1/html/random.haddock
haddock-html: /home/runner/Cabal-Haskell/.cabal-sandbox/share/doc/x86_64-linux-ghc-8.6.5/random-1.2.1/html
