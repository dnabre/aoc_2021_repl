name: psqueues
version: 0.2.7.3
id: psqueues-0.2.7.3-1IGFVK8SvJA9JzpgNwZH6v
key: psqueues-0.2.7.3-1IGFVK8SvJA9JzpgNwZH6v
license: BSD-3-Clause
maintainer: Jasper Van der Jeugt <jaspervdj@gmail.com>
synopsis: Pure priority search queues
description:
    The psqueues package provides
    <http://en.wikipedia.org/wiki/Priority_queue Priority Search Queues> in
    three different flavors.
    .
    * @OrdPSQ k p v@, which uses the @Ord k@ instance to provide fast insertion,
    deletion and lookup. This implementation is based on Ralf Hinze's
    <http://citeseer.ist.psu.edu/hinze01simple.html A Simple Implementation Technique for Priority Search Queues>.
    Hence, it is similar to the
    <http://hackage.haskell.org/package/PSQueue PSQueue> library, although it is
    considerably faster and provides a slightly different API.
    .
    * @IntPSQ p v@ is a far more efficient implementation. It fixes the key type
    to @Int@ and uses a <http://en.wikipedia.org/wiki/Radix_tree radix tree>
    (like @IntMap@) with an additional min-heap property.
    .
    * @HashPSQ k p v@ is a fairly straightforward extension of @IntPSQ@: it
    simply uses the keys' hashes as indices in the @IntPSQ@. If there are any
    hash collisions, it uses an @OrdPSQ@ to resolve those. The performance of
    this implementation is comparable to that of @IntPSQ@, but it is more widely
    applicable since the keys are not restricted to @Int@, but rather to any
    @Hashable@ datatype.
    .
    Each of the three implementations provides the same API, so they can be used
    interchangeably. The benchmarks show how they perform relative to one
    another, and also compared to the other Priority Search Queue
    implementations on Hackage:
    <http://hackage.haskell.org/package/PSQueue PSQueue>
    and
    <http://hackage.haskell.org/package/fingertree-psqueue fingertree-psqueue>.
    .
    <<http://i.imgur.com/KmbDKR6.png>>
    .
    <<http://i.imgur.com/ClT181D.png>>
    .
    Typical applications of Priority Search Queues include:
    .
    * Caches, and more specifically LRU Caches;
    .
    * Schedulers;
    .
    * Pathfinding algorithms, such as Dijkstra's and A*.
category: Data Structures
abi: 2d380c2750cb5719981160528b58f36c
exposed: True
exposed-modules:
    Data.HashPSQ Data.IntPSQ Data.OrdPSQ
hidden-modules: Data.BitUtil Data.HashPSQ.Internal
                Data.IntPSQ.Internal Data.OrdPSQ.Internal
import-dirs: /home/runner/Cabal-Haskell/.cabal-sandbox/lib/x86_64-linux-ghc-8.6.5/psqueues-0.2.7.3-1IGFVK8SvJA9JzpgNwZH6v
library-dirs: /home/runner/Cabal-Haskell/.cabal-sandbox/lib/x86_64-linux-ghc-8.6.5/psqueues-0.2.7.3-1IGFVK8SvJA9JzpgNwZH6v
dynamic-library-dirs: /home/runner/Cabal-Haskell/.cabal-sandbox/lib/x86_64-linux-ghc-8.6.5
data-dir: /home/runner/Cabal-Haskell/.cabal-sandbox/share/x86_64-linux-ghc-8.6.5/psqueues-0.2.7.3
hs-libraries: HSpsqueues-0.2.7.3-1IGFVK8SvJA9JzpgNwZH6v
depends:
    base-4.12.0.0 deepseq-1.4.4.0 ghc-prim-0.5.3
    hashable-1.4.0.1-IO636hPQNzfokqAqSWWSW
haddock-interfaces: /home/runner/Cabal-Haskell/.cabal-sandbox/share/doc/x86_64-linux-ghc-8.6.5/psqueues-0.2.7.3/html/psqueues.haddock
haddock-html: /home/runner/Cabal-Haskell/.cabal-sandbox/share/doc/x86_64-linux-ghc-8.6.5/psqueues-0.2.7.3/html
